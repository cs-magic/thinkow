// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

/// next-auth
//
// model Post {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   createdBy   User   @relation(fields: [createdById], references: [id])
//   createdById String
//
//   @@index([name])
// }
//
// // Necessary for Next auth
// model Account {
//   id                String  @id @default(uuid())
//   userId            String
//   type              String
//   providers          String
//   providerAccountId String
//   refresh_token     String? // @db.Text
//   access_token      String? // @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? // @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([providers, providerAccountId])
// }
//
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//
// model User {
//   id            String    @id @default(uuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   posts         Post[]
// }
//
// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//
//   @@unique([identifier, token])
// }

model User {
  id      String    @id @default(uuid())
  Diagram Diagram[]
  Session Session[]
}

model Diagram {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  title    String? @default("Untitled")
  /// [DiagramMain]
  flowData Json?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  threads Thread[]
}

model Thread {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  diagram   Diagram @relation(fields: [diagramId], references: [id], onDelete: Cascade)
  diagramId String

  status RunningStatus @default(NotStarted)
  reason String?

  /// [OpenAIMessage]
  context Json[]

  /// [SSEEvent]
  events Json[]
}

enum RunningStatus {
  NotStarted
  Running
  Paused
  Finished
  Error
}
